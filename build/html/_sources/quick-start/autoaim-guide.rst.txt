自瞄使用说明
=============

1. 使用建议
-------------

* 自瞄3m-5m内命中率高

* 视觉识别到一个敌人越久，预测就越准

* 自身处在左右急速运动或急停，或者敌人左右急停时自瞄可能会甩飞(原因:敌人状态从移动到急停的一瞬间，卡尔曼将会重新初始化以保证自身模型的稳定性)

* 使用自瞄打击小陀螺时先锁住看1~2s再发弹，看的时间越久自瞄预测就越准

* 对于在电容支持下高速陀螺或者移动的目标，可以等待几秒待其电容耗尽再打击(对于转速过快的目标将自己锁定在车辆装甲板中心)

* 如果自瞄失效，或者目标常规移动命中率都极低，使用手瞄，将问题反馈给视觉

2. 具体启动方法
-------------------------

* 1.先为实车装上电池，上电，观察nuc是否正常上电
  
* 2.等待nuc开机完毕，若自启动正常，则跳到7
  
* 3.连接视觉组专用调车wifi，rujie开头的那个
  
* 4.用nomachine远程桌面连接到实车的nuc，找到相应的工作目录（这里要先拿到实车nuc对应的ip地址或自行判断是否连接到对应的nuc）
  
* 5.在该目录打开终端，输入bash rv_start.sh
  
* 6.等待启动完毕
  
* 7.用microusb线连接实车遥控，并将遥控左拨杆拉到最上方PC模式（拨到中间是RC模式，即遥控器模式）
  
* 8.打开robomaster选手客户端
  
* 9.观察靶车颜色和自身颜色是否相反，如果不是则调靶车裁判系统，使其变为相反色
  
* 10.回到robomaster选手客户端，控制鼠标使实车视角正对靶车的装甲板
  
* 11.鼠标右键使用自瞄，看是否能正常将枪管甩到正对装甲板的位置


1. 调试阶段
-------------
.. note::

   有时视觉自瞄组成员会不在实验室或者出现问题看似是视觉BUG实则不然的情况，所以我们希望电控同学能掌握一些基本的调试方法，用以解决或者正确定位问题，能够独立进行调试，从而提高效率。有时就是几个指令，观察一下可视化的事情，根本不会涉及到视觉代码相关的层面，也可避免出现人等人的现象。

   所以也建议电控同学教会视觉同学对于遥控器或者客户端控制机器人的操作，以方便电控同学不在视觉也能对自瞄在车上进行调试。


* 1.在远程桌面相应的工作目录终端输入bash fox.sh启动fox服务端
  
* 2.Foxglove Studio中打开连接，输入ws://实车ip地址:8765
  
* 3.Foxglove内部可视化调试具体用法自行搜索
  
* 4.接着按照自己的思路调节参数或代码


1.1. 关于foxglove可视化
~~~~~~~~~~~~~~~~~~~~~~~

在调试阶段视觉更多的操作是在开启foxglove下进行的，其可以图形可视化的显示出自瞄信息，在遇到自瞄甩飞、不识别装甲板、查看电控目标解算位置，或者需要参数调整等问题时打开终端输入以下指令

.. code-block:: bash
   
   #在项目文件夹内内打开终端
   source install/setup.bash
   bash fox.sh #如果没有这个文件则运行下面这行
   ros2 launch foxglove_bridge foxglove_bridge_launch.xml 


打开foxglove端后你能看到类似以下内容

  .. image:: image/1.png
     :width: 600 px


其中``serial/receive``为电控发给视觉的imu以及识别所需参数

``armor_solver/cmd_gimbal`` 为armor_solver节点对识别到二维坐标处理完成后发给电控的云台绝对角度

``tracker/target`` 是视觉滤波结果,调试时具有重要参考意义

``三维`` 这个窗口是对自己和目标的可视化建模，两个坐标系分别是 ``odom`` 坐标系(在最下面)， ``相机`` 坐标系(在上面)，四块装甲板是目标装甲板位置。视觉发送的所有坐标都在"odom"坐标系下。


.. note::
    此时晃动云台，三维窗口下显示的四块装甲板的位置应不发生改变，即其位置是在odom坐标系下定义的，应不随相机坐标系的变化而变化

1.2. 关于打击静态目标，距离不同打高打低的问题
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
修改pc上的home目录下的 ``/{workspace}/src/rm_bringup/config/launch_params.yaml`` 与 ``/ros_ws/src/rm_gimbal_description/urdf
/rm_gimbal.urdf.xacro`` 路径内的"rpy"部分为 “0 0 0” 如下图

  .. image:: image/2.png
     :width: 600 px

  .. image:: image/3.png
     :width: 600 px

然后修改串口包(rm_serial_driver)中的infantry_protocol.cpp,将其中的tmp_pitch改为固定值0，
后进入robomaster选手客户端使得云台pitch固定到绝对0点，
后用其余工具测量枪管上的pitch角，如果不为0则将其测得的误差放进rpy中的第二个参数，
以此迭代出正确的参数。

1.3 关于云台坐标系的问题
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 考虑到自瞄的最终效果，我们决定统一使用云台绝对坐标系作为参照。

* 上位机发送到下位机的云台信息yaw and pitch 应该是基于云台绝对坐标系，也就是 ``armor_solver/cmd_gimbal`` 的 ``yaw`` ``pitch`` ，而不应该是 ``yaw_diff`` 和 ``pitch_diff`` 基于云台的相对坐标系

* 如果在调试过程中发现识别后，自瞄云台摆动的角度过大或小，
  请检查 ``src/rm_hardware_driver/rm_serial_driver/src/protocol/infantry_protocol.cpp`` 中的 ``send`` 函数，
  查看发送云台角度的是相对的还是绝对的，并注意发送的角度单位是否是弧度

.. note:: 如果1.3的解决方法已经尝试过，仍然无效，那么就要检查下位机的角度处理逻辑,详见1.4


1.4 通过上位机查看下位机的云台伺服器处理角度的逻辑
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 将 ``src/rm_hardware_driver/rm_serial_driver/src/protocol/infantry_protocol.cpp`` 的 ``send`` 函数中将要发送的角度设置为固定值
* ``角度单位`` :
  这里建议yaw设置为1,pitch设置为0.1以防止云台电机损坏
  在设置完固定值后，重启程序，将相机对准要识别的物体，识别成功后按下鼠标右键
  查看云台角度的变化，如果角度变化过大则为弧度，反之为角度
* ``坐标系``:
  同理，查看云台角度的变化，如果按下1s后云台处于静止状态，坐标系为绝对坐标系，此时发送的角度应为绝对坐标系
  反之，云台处于一直变化状态，坐标系为相对坐标系，此时需要联系电控成员修改处理逻辑。






* 2024.4.10 Shakima first commit

* 2024.9.1 123456dfg changed

* 2024.11.30 123456dfg updated

* 2024.12.4 123456dfg updated


.. contents:: Table of Contents
   :depth: 2
   :local:
   
